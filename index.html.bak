<!DOCTYPE html>
<head>
<meta charset="utf-8">
<style>
  body {
    margin: 0;
    padding: 0;
    background: black;
  }
  #titlediv {
    font-family: monospace;
    text-align: center;
    font-size: 48px;
    position: fixed;
    width: 100%;
    height: 50px;
    color: white;
    background-color: black;
    padding: 5px;
    top: 0px;
    overflow-y: auto;
  }
  #attackdiv {
    font-family: monospace;
    font-size: 10px;
    position: fixed;
    width: 50%;
    height: 100px;
    color: white;
    background-color: black;
    padding: 5px;
    bottom: 0px;
    overflow-y: auto;
  }
  #container1 {
    position: relative;
    width: 100vw;
    height: 100vh;
    max-width: 100%;
    max-height: 100%
  }
  #about { display: none; }
  #aboutdiv {
    text-align: right;
    width: 100px;
    height: 100px;
    top: 0px;
    right: 0px;
    position: fixed;
    padding: 10px;
    color: white;
  }
  #ccdiv {
    text-align: right;
    width: 100px;
    height: 20px;
    bottom: 0px;
    right: 0px;
    position: fixed;
    padding: 5px;
    color: white;
  }
  /* Overlay and modal styles omitted for brevity */
  
  #attackPopup {
  position: absolute; /* changed from fixed */
  bottom: auto;       /* remove bottom */
  left: auto;         /* remove left */
  background-color: rgba(15, 15, 15, 0.5); /* more transparent background */
  border: 2px solid rgba(0, 255, 0, 0.7); /* semi-transparent green border */
  color: rgba(0, 255, 0, 0.9); /* slightly transparent green text */
  font-family: monospace;
  font-size: 14px;
  padding: 15px;
  max-width: 300px;
  white-space: pre-wrap;
  z-index: 9999;
  box-shadow: 0 0 10px #0f0;
  border-radius: 6px;
  display: none;
  }

  .datamaps-bubble {
  pointer-events: all !important;
  cursor: pointer;
  fill-opacity: 0.5; /* make sure it's visible and interactive */
  }
  
  @keyframes dashMove {
  0% {
    stroke-dashoffset: 100%;
    }
  100% {
    stroke-dashoffset: 0%;
    }
  }

  .datamaps-arc {
    stroke-linecap: round;
    fill: none;
    animation: dashMove 4s linear infinite; /* ? slow it down */
  }
  
  #attackPopupClose:hover {
  color: #f00;
  text-decoration: underline;
  }
</style>

<script src="https://d3js.org/d3.v3.min.js"></script>
<script src="https://d3js.org/d3.geo.projection.v0.min.js"></script>
<script src="https://d3js.org/topojson.v1.min.js"></script>
<script src="https://datamaps.github.io/scripts/datamaps.world.min.js?v=1"></script>
<script src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
<script src="jquery.simplemodal-1.4.4.js"></script>

<script>
function about() {
  $("#about").modal();
}
</script>

<link href="//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet">
</head>

<body>

  <audio id="starwars" src="Blaster-Solo.wav" preload="auto"></audio>
  <audio id="tng" src="tng_torpedo_clean.mp3" preload="auto"></audio>
  <audio id="b5" src="B5-interceptor1.wav" preload="auto"></audio>
  <audio id="wargames" src="WarGames-KeyPress.wav" preload="auto"></audio>
  <audio id="pew" src="pew.mp3" preload="auto"></audio>
  <audio id="galaga" src="shot_sound.mp3" preload="auto"></audio>
  <audio id="asteroids" src="asteroids.mp3" preload="auto"></audio>
  <audio id="china" src="china.mp3" preload="auto"></audio>
  <audio id="timallen" src="timallen.wav" preload="auto"></audio>

  <center><div id="container1"></div></center>
  <div id="titlediv">Attack Map</div>
  <div id="attackdiv"></div>
  <div id="aboutdiv"><i class="fa fa-question-circle fa-2x" onClick="about();"></i></div>

  <div id="ccdiv">
    <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">
      <img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/80x15.png" />
    </a>
  </div>

  <div id="about">
    <h3>About IPew</h3>
    Attack maps are the <span style="font-family: monospace;">&lt;blink&gt;</span> tag of information security. They are pure eye candy, meant to scare the general public and <i>WOW</i> unsuspecting executives visiting Security Operations Centers. Yet, security vendors keep cranking them out. We didn't want organizations without "real" data or l33t animation skills to to feel left out, so we built this map for anyone to use [CC BY-SA]. Plus, they're all missing sound effects! And, most (all, really) use mind-numbingly dumb map projections, begging the question: <i>"Does Greenland make my map look big?"</i>.<br/>
    <br/>
    The default map uses a statistical model (infrequently updated) for source "attack" node country of origin &amp; frequency while destinations are fully randomized. The default sound is a Star Wars "blaster" (guess which one!). Sounds can be customized and an organization name can be specified, plus there are a few other <i>interesting</i> options.<br/>
    <br/>
    Check out the <a target=_blank href='http://github.com/hrbrmstr/pewpew'>github repository</a> for more information and instructions on how to customize the map options for maximum effect.<br/>
    <br/>
    Brought to you by <a target=_blank href="http://twitter.com/alexcpsec">@alexcpsec</a>, <a target=_blank href="http://twitter.com/hrbrmstr">@hrbrmstr</a> &amp; <a target=_blank href="http://dds.ec/blog">Data-Driven Security</a>
  </div>

  <!-- Use Hash-Bang to maintain scroll position when closing modal -->
  <a href="#!" class="modal-close" title="Close this modal" data-dismiss="modal" data-close="Close">&times;</a>


<div id="attackPopup" style="display:none;">
  <span id="attackPopupClose" style="cursor:pointer; color:#0f0; font-weight:bold; position:absolute; top:3px; right:6px;">[x]</span>
  <pre id="attackPopupContent"></pre>
</div>


  <script>
    
    const serviceColors = {
      ssh: '#ff4136',       // red
      //ssh: '#0074D9',    // blue
      ftp: '#2ecc40',       // green
      apache: '#0074D9',    // blue
      nginx: '#B10DC9',     // purple
      sql: '#FF851B',       // orange
      unknown: '#aaaaaa'    // grey fallback
    };


    // Setup queues and variables
    function FixedQueue(size, initialValues) {
      initialValues = (initialValues || []);
      var queue = Array.apply(null, initialValues);
      queue.fixedSize = size;
      queue.push = FixedQueue.push;
      queue.splice = FixedQueue.splice;
      queue.unshift = FixedQueue.unshift;
      FixedQueue.trimTail.call(queue);
      return queue;
    }

    FixedQueue.trimHead = function () {
      if (this.length <= this.fixedSize) { return; }
      Array.prototype.splice.call(this, 0, (this.length - this.fixedSize));
    };

    FixedQueue.trimTail = function () {
      if (this.length <= this.fixedSize) { return; }
      Array.prototype.splice.call(this, this.fixedSize, (this.length - this.fixedSize));
    };

    FixedQueue.wrapMethod = function (methodName, trimMethod) {
      var wrapper = function () {
        var method = Array.prototype[methodName];
        var result = method.apply(this, arguments);
        trimMethod.call(this);
        return result;
      };
      return wrapper;
    };

    FixedQueue.push = FixedQueue.wrapMethod("push", FixedQueue.trimHead);
    FixedQueue.splice = FixedQueue.wrapMethod("splice", FixedQueue.trimTail);
    FixedQueue.unshift = FixedQueue.wrapMethod("unshift", FixedQueue.trimTail);

    var attacks = FixedQueue(7, []);
    var hits = FixedQueue(7, []);
    var boom = FixedQueue(7, []);
    var centers = [];

    // Initialize Datamap
    var map = new Datamap({
      scope: 'world',
      element: document.getElementById('container1'),
      projection: 'winkel3',
      fills: { defaultFill: 'black' },
      geographyConfig: {
        dataUrl: null,
        hideAntarctica: true,
        borderWidth: 0.75,
        borderColor: '#4393c3',
        popupTemplate: function (geography, data) {
          return '<div class="hoverinfo" style="color:white;background:black">' +
            geography.properties.name + '</div>';
        },
        popupOnHover: true,
        highlightOnHover: false,
        highlightFillColor: 'black',
        highlightBorderColor: 'rgba(250, 15, 160, 0.2)',
        highlightBorderWidth: 2
      }
    });

    // Load country centroids asynchronously
    d3.tsv("country_centroids_primary.csv", function (data) {
      centers = data;
    });


    //This is the secton that handles the arcs, bubbles, popups etc..
    //
    //
    //
    
    function draw() {
      map.arc(hits, {
        strokeWidth: 2,
        arcSharpness: 1
      });
    
      // Apply animated dash
      setTimeout(() => {
        d3.selectAll('.datamaps-arc').each(function (d, i) {
          const path = d3.select(this);
          const totalLength = this.getTotalLength();
    
          path
            .attr('stroke-dasharray', totalLength + ' ' + totalLength)
            .attr('stroke-dashoffset', 0)
            .style('animation', 'dashMove 2s linear infinite');
    
          // Apply custom colour from hits[]
          const arc = hits[i];
          if (arc && arc.strokeColor) {
            path.style('stroke', arc.strokeColor);
          }
        });
      }, 10);
    
      map.bubbles(boom, {
        popupTemplate: function (geo, data) {
          return '<div class="hoverinfo" style="color:white;background:black">' + (data.attk || '') + '</div>';
        },
      });
    
      d3.selectAll('.datamaps-bubble').on('click', function (d) {
        const content =
          'Attack Details:\n' +
          'Service: ' + (d.service || 'N/A') + '\n' +
          'Port: ' + (d.port || 'N/A') + '\n' +
          'Username: ' + (d.username || 'N/A') + '\n' +
          'Source IP: ' + (d.sourceIp || 'N/A') + '\n' +
          'Source Country: ' + (d.sourceCountry || 'N/A');
    
        const popup = document.getElementById('attackPopup');
        const popupContent = document.getElementById('attackPopupContent');
    
        popupContent.textContent = content;
        popup.style.display = 'block';
        popup.style.left = (d3.event.pageX + 10) + 'px';
        popup.style.top = (d3.event.pageY + 10) + 'px';
      });
    }


    // Create WebSocket and set up message handler
    const ws = new WebSocket('ws://vps.cyberwolf-security.co.uk:8001');

    ws.onmessage = function (event) {
      const data = JSON.parse(event.data);
      console.log("??? Incoming attack:", data);
      
      // Determine colour based on service
      const service = (data.service || "unknown").toLowerCase();
      const colour = serviceColors[service] || serviceColors["unknown"];
      
      // Debug output:
      console.log(`?? Service = ${service}, Colour = ${colour}`);
      
      attacks.push({
        origin: data.origin,
        dest: data.dest,
        type: data.type
      });

      // Wait for centers to load
      if (!centers.length) return;

      // Find origin data for arcs
      const originData = centers.find(c => c.FIPS10.toUpperCase() === data.origin.toUpperCase());
      if (!originData) return;

      // For demo, fixed destination at Blackpool (lat/lon)
      const destLat = 53.814;
      const destLong = -3.055;




      // Add new arcs and bubbles
      hits.push({
        origin: { latitude: parseFloat(originData.LAT), longitude: parseFloat(originData.LONG) },
        destination: { latitude: destLat, longitude: destLong },
        strokeColor: colour
      });

      
      boom.push({
        latitude: parseFloat(originData.LAT),
        longitude: parseFloat(originData.LONG),
        radius: 7,
        fillKey: undefined, // disables defaultFill use
        fill: colour,
        attk: data.type,
        service: service,
        port: data.port || "??",
        username: data.username || "unknown",
        sourceIp: data.ip,
        sourceCountry: data.origin,
        fillOpacity: 0.8
      });

      // Update log div
      $('#attackdiv').append(
        data.origin + " (" + data.city + ") " + "(" + data.ip + ") " +
        "<span style='color:red'>attacks</span> " +
        data.dest + " " +
        "<span style='color:steelblue'>(" + data.type + ")</span><br/>"
      );
      $('#attackdiv').animate({ scrollTop: $('#attackdiv').prop("scrollHeight") }, 500);

      draw();
      
      // Play WarGames-KeyPress.wav 3 times in succession
      const audio = document.getElementById('wargames');
      let repeatCount = 0;
      
      const playRepeated = () => {
        if (repeatCount >= 3) return;
        audio.pause();
        audio.currentTime = 0;
        audio.play().catch(() => {});
        repeatCount++;
        setTimeout(playRepeated, 200); // delay between each repeat
      };
      
      playRepeated();
    };

    // Close popup when [x] is clicked
    document.getElementById('attackPopupClose').addEventListener('click', () => {
      document.getElementById('attackPopup').style.display = 'none';
    });
    
    // Close popup when clicking outside of it
    document.addEventListener('click', function (event) {
      const popup = document.getElementById('attackPopup');
    
      const isPopup = popup.contains(event.target);
      const isBubble = event.target.classList.contains('datamaps-bubble');
      const isCloseButton = event.target.id === 'attackPopupClose';
    
      if (!isPopup && !isBubble && !isCloseButton) {
        popup.style.display = 'none';
      }
    });

    // Handle window resize
    d3.select(window).on('resize', function () { location.reload(); });

  </script>

  
</body>
</html>
